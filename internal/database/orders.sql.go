// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
insert into orders(id, created_at, updated_at, orderTotal, userID, addressID)
values ($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, ordertotal, userid, addressid
`

type CreateOrderParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Ordertotal float64
	Userid     uuid.UUID
	Addressid  uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Ordertotal,
		arg.Userid,
		arg.Addressid,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ordertotal,
		&i.Userid,
		&i.Addressid,
	)
	return i, err
}

const getAllOrderByUserID = `-- name: GetAllOrderByUserID :many
select id, created_at, updated_at, ordertotal, userid, addressid from orders
where userID = $1
`

func (q *Queries) GetAllOrderByUserID(ctx context.Context, userid uuid.UUID) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ordertotal,
			&i.Userid,
			&i.Addressid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
