// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orderProduct.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
insert into orderProduct(id, created_at, updated_at, amount, orderID, productID)
values ($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, amount, orderid, productid
`

type CreateOrderProductParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Amount    int32
	Orderid   uuid.UUID
	Productid uuid.UUID
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (Orderproduct, error) {
	row := q.db.QueryRowContext(ctx, createOrderProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Amount,
		arg.Orderid,
		arg.Productid,
	)
	var i Orderproduct
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.Orderid,
		&i.Productid,
	)
	return i, err
}

const getAllOrderProductByOrderID = `-- name: GetAllOrderProductByOrderID :many
select id, created_at, updated_at, amount, orderid, productid from orderProduct
where orderID = $1
`

func (q *Queries) GetAllOrderProductByOrderID(ctx context.Context, orderid uuid.UUID) ([]Orderproduct, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderProductByOrderID, orderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orderproduct
	for rows.Next() {
		var i Orderproduct
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Amount,
			&i.Orderid,
			&i.Productid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullOrderProductByOrderID = `-- name: GetFullOrderProductByOrderID :many
select
	op.id, op.created_at, op.updated_at, op.amount, op.orderid, op.productid,
	p.name,
    p.price,
	p.image,
	p.company
from
	orderProduct op
	join products p on op.productid = p.id
where op.orderid = $1
`

type GetFullOrderProductByOrderIDRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Amount    int32
	Orderid   uuid.UUID
	Productid uuid.UUID
	Name      string
	Price     int32
	Image     string
	Company   string
}

func (q *Queries) GetFullOrderProductByOrderID(ctx context.Context, orderid uuid.UUID) ([]GetFullOrderProductByOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrderProductByOrderID, orderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullOrderProductByOrderIDRow
	for rows.Next() {
		var i GetFullOrderProductByOrderIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Amount,
			&i.Orderid,
			&i.Productid,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
