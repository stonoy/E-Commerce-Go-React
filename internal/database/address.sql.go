// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: address.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :one
insert into address(id, created_at, updated_at,name,location,landmark, city,country,pin,userID)
values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
RETURNING id, created_at, updated_at, name, location, landmark, city, country, pin, userid
`

type CreateAddressParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Location  string
	Landmark  string
	City      string
	Country   string
	Pin       int32
	Userid    uuid.UUID
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Location,
		arg.Landmark,
		arg.City,
		arg.Country,
		arg.Pin,
		arg.Userid,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Location,
		&i.Landmark,
		&i.City,
		&i.Country,
		&i.Pin,
		&i.Userid,
	)
	return i, err
}

const getAddressByOrder = `-- name: GetAddressByOrder :one
select
    add.id, add.created_at, add.updated_at, add.name, add.location, add.landmark, add.city, add.country, add.pin, add.userid
from
    orders o
    join address add on o.addressID = add.id
where o.id = $1
`

func (q *Queries) GetAddressByOrder(ctx context.Context, id uuid.UUID) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByOrder, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Location,
		&i.Landmark,
		&i.City,
		&i.Country,
		&i.Pin,
		&i.Userid,
	)
	return i, err
}

const getAllAddressByUserID = `-- name: GetAllAddressByUserID :many
select id, created_at, updated_at, name, location, landmark, city, country, pin, userid from address
where userID = $1
`

func (q *Queries) GetAllAddressByUserID(ctx context.Context, userid uuid.UUID) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAllAddressByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Location,
			&i.Landmark,
			&i.City,
			&i.Country,
			&i.Pin,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
