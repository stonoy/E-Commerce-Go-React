// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
insert into products(id, created_at, updated_at, name, price, image, description, category, company, featured, shipping)
values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
RETURNING id, created_at, updated_at, name, price, image, company, description, category, featured, shipping
`

type CreateProductParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Price       int32
	Image       string
	Description string
	Category    string
	Company     string
	Featured    bool
	Shipping    bool
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Price,
		arg.Image,
		arg.Description,
		arg.Category,
		arg.Company,
		arg.Featured,
		arg.Shipping,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Price,
		&i.Image,
		&i.Company,
		&i.Description,
		&i.Category,
		&i.Featured,
		&i.Shipping,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
select id, created_at, updated_at, name, price, image, company, description, category, featured, shipping from products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Company,
			&i.Description,
			&i.Category,
			&i.Featured,
			&i.Shipping,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyAndCategory = `-- name: GetCompanyAndCategory :many
select distinct company,category from products
`

type GetCompanyAndCategoryRow struct {
	Company  string
	Category string
}

func (q *Queries) GetCompanyAndCategory(ctx context.Context) ([]GetCompanyAndCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyAndCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyAndCategoryRow
	for rows.Next() {
		var i GetCompanyAndCategoryRow
		if err := rows.Scan(&i.Company, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedProducts = `-- name: GetFeaturedProducts :many
select id, created_at, updated_at, name, price, image, company, description, category, featured, shipping from products
where featured = true
`

func (q *Queries) GetFeaturedProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getFeaturedProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Company,
			&i.Description,
			&i.Category,
			&i.Featured,
			&i.Shipping,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilteredProducts = `-- name: GetFilteredProducts :many
SELECT 
  id, created_at, updated_at, name, price, image, company, description, category, featured, shipping
FROM 
  products
WHERE 
  (COALESCE(array_length($1::TEXT[], 1), 0) = 0 
    OR company = ANY($1::TEXT[]))  -- Proper comparison with arrays
  AND (COALESCE(array_length($2::TEXT[], 1), 0) = 0 
    OR category = ANY($2::TEXT[]))  -- Correct handling of set-returning functions
  AND ($3::INT IS NULL OR price < $3::INT)  -- Explicit type casting to INT
  AND ($4::TEXT IS NULL OR name ILIKE '%' || $4::TEXT || '%')  -- Explicit type for ProductName
LIMIT $5  -- Define limit for pagination
OFFSET $6
`

type GetFilteredProductsParams struct {
	Column1 []string
	Column2 []string
	Column3 int32
	Column4 string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetFilteredProducts(ctx context.Context, arg GetFilteredProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getFilteredProducts,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Company,
			&i.Description,
			&i.Category,
			&i.Featured,
			&i.Shipping,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
select id, created_at, updated_at, name, price, image, company, description, category, featured, shipping from products
where id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Price,
		&i.Image,
		&i.Company,
		&i.Description,
		&i.Category,
		&i.Featured,
		&i.Shipping,
	)
	return i, err
}
