// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cart.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
insert into cart(id, created_at, updated_at, numItemsInCart,chargeTotal,shipping,tax,orderTotal,userID)
values ($1,$2,$3,$4,$5,$6,$7,$8,$9)
RETURNING id, created_at, updated_at, numitemsincart, chargetotal, shipping, tax, ordertotal, userid
`

type CreateCartParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Numitemsincart int32
	Chargetotal    float64
	Shipping       int32
	Tax            float64
	Ordertotal     int32
	Userid         uuid.UUID
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Numitemsincart,
		arg.Chargetotal,
		arg.Shipping,
		arg.Tax,
		arg.Ordertotal,
		arg.Userid,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Numitemsincart,
		&i.Chargetotal,
		&i.Shipping,
		&i.Tax,
		&i.Ordertotal,
		&i.Userid,
	)
	return i, err
}

const deleteCartByUserId = `-- name: DeleteCartByUserId :exec
delete from cart
where userID = $1
`

func (q *Queries) DeleteCartByUserId(ctx context.Context, userid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCartByUserId, userid)
	return err
}

const getCartByUserId = `-- name: GetCartByUserId :one
select id, created_at, updated_at, numitemsincart, chargetotal, shipping, tax, ordertotal, userid from cart
where userID = $1
`

func (q *Queries) GetCartByUserId(ctx context.Context, userid uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartByUserId, userid)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Numitemsincart,
		&i.Chargetotal,
		&i.Shipping,
		&i.Tax,
		&i.Ordertotal,
		&i.Userid,
	)
	return i, err
}

const getNumOfCart = `-- name: GetNumOfCart :one
select count(*) from cart
where userID = $1
`

func (q *Queries) GetNumOfCart(ctx context.Context, userid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumOfCart, userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductCountOfCart = `-- name: GetProductCountOfCart :many
select
    p.name,
    cp.productID,
    sum(cp.amount) as total_quantity
from
 cartProduct cp
 join products p on cp.productID = p.id
 group by
    cp.productID,
    p.name
`

type GetProductCountOfCartRow struct {
	Name          string
	Productid     uuid.UUID
	TotalQuantity int64
}

func (q *Queries) GetProductCountOfCart(ctx context.Context) ([]GetProductCountOfCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductCountOfCart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductCountOfCartRow
	for rows.Next() {
		var i GetProductCountOfCartRow
		if err := rows.Scan(&i.Name, &i.Productid, &i.TotalQuantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :one
update cart
set updated_at = NOW(),
numItemsInCart = $1,
chargeTotal = $2,
shipping = $3,
tax = $4,
orderTotal = $5
where userID = $6
RETURNING id, created_at, updated_at, numitemsincart, chargetotal, shipping, tax, ordertotal, userid
`

type UpdateCartParams struct {
	Numitemsincart int32
	Chargetotal    float64
	Shipping       int32
	Tax            float64
	Ordertotal     int32
	Userid         uuid.UUID
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart,
		arg.Numitemsincart,
		arg.Chargetotal,
		arg.Shipping,
		arg.Tax,
		arg.Ordertotal,
		arg.Userid,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Numitemsincart,
		&i.Chargetotal,
		&i.Shipping,
		&i.Tax,
		&i.Ordertotal,
		&i.Userid,
	)
	return i, err
}
